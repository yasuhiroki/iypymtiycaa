#!/usr/bin/env zsh

function zshef::install() {
    zshef::util::mng::is_installed "git" || {
        zshef::util::os::install "git"
    }
}

function zshef::update() {
    zshef::util::mng::is_installed "git" && {
        zshef::util::os::update "git"
    }
}

function zshef::config() {
    git config --global push.default simple
    git config --global pull.ff only
    git config --global core.autocrlf input
    git config --global rebase.autostash true
    git config --global rebase.autosquash true
    git config --global sequence.editor $(which vim)
    git config --global mergetool.prompt false
    git config --global merge.conflictstyle diff3
    git config --global merge.tool vimdiff

    my::config::gitignore
    my::config::alias
    my::config::commit_template
}

function my::config::gitignore() {
    mkdir -p ~/.config/git/

    local dir="${${(%):-%N}:A:h}/cookbooks/git"
    cp ${dir}/ignore ~/.config/git/ignore
}

function my::config::alias() {
    git config --global alias.ri 'rebase -i'
    git config --global alias.dl 'branch -D'
    git config --global alias.fp 'fetch -p'
    git config --global alias.fixup 'commit --fixup'

    # 不要なブランチをポイする
    git config --global alias.poi "!$(my::config::alias::poi)"
    # ブランチをあいまい検索してcheckoutする
    git config --global alias.oide "!$(my::config::alias::fbr)"
    # diff を正規表現で検索
    git config --global alias.look "log -p -G"

    # 現在のとあるバージョンを表示
    git config --global alias.ver "!$(my::config::alias::ver)"

    # CircleCI のページを表示
    git config --global alias.ci "!open \$(git config --get remote.origin.url | sed 's/^.*github.com.//;s/.git$//;s|^|https://circleci.com/gh/|')"

    # #1234 から issue の url link を [:octocat:Link](LINK) という文字列で生成
    git config --global alias.tolink "!$(my::config::alias::tolink)"
}

function zshef::config::osx() {
    git config --global alias.done "!$(my::config::alias::done::osx)"
}

function my::config::alias::done::osx() {
    echo "f() { git log --pretty=format:'- [x] %s' \${1:-origin/develop}..\${2:-HEAD} | awk '\$0' | tac ; }; f"
}

function my::config::alias::poi() {
    echo 'git branch -D ''$(git branch --merged | grep -v '"'^*'"')'
}

function my::config::alias::fbr() {
    echo 'f() { local branches branch; branches=$(git branch --sort=-authordate --all | grep -v HEAD | sort -t'/' -k1,1 -s) && branch=$(echo "$branches" | fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) && git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##"); }; f'
}

function my::config::alias::ver() {
    echo 'f() { which yk-ver > /dev/null || { echo "should be download yk-ver.sh from gist"; exit 1; }; yk-ver "$1"; }; f'
}

function my::config::alias::tolink() {
    echo 'f() { local repo_url=$(git config --get remote.origin.url | sed "s|^.*\(github.com.*\)|https://\1|"); sed "s|#\([0-9]\{1,\}$\)|[:octocat:Link](${repo_url}/issues/\1)|"; }; f'
}

function my::config::commit_template() {
    echo "

# feature: 機能の追加
# bug: バグの修正
# style: コーディングスタイルの修正 (機能・パフォーマンスの変更は含まない)
# refactor: リファクタ
# perf: パフォーマンスの改善
# test: テストの追加・修正
# docs: ドキュメントの追加修正
# misc: その他、ビルド環境の設定変更など (docker, circleci, rubocop)" > ~/.git_commit_template.md
    git config --global commit.template ~/.git_commit_template.md
}
